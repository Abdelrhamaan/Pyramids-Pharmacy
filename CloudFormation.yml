AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to launch an EC2 instance with Docker, Docker Compose, and deploy the Pyramids-Pharmacy application.

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
    ConstraintDescription: must be a valid EC2 instance type.

Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, HTTP, and App Ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  ElasticIP:
    Type: AWS::EC2::EIP

  ElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2Instance
      EIP: !Ref ElasticIP

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: ami-0fff1b9a61dec8a5f
      KeyName: CloudFormationKeyPair
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update system packages
          sudo yum update -y

          # Install required packages
          sudo yum install -y docker git jq

          # Setup swap space
          sudo dd if=/dev/zero of=/swapfile bs=1M count=2048
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

          # Start and enable Docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -a -G docker ec2-user

          # Install Node.js 20.x
          curl -sL https://rpm.nodesource.com/setup_20.x | sudo bash -
          sudo yum install -y nodejs

          # Install Docker Compose
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # Get the public IP
          export PUBLIC_IP=${ElasticIP}

          # Clone the repository
          cd /home/ec2-user
          git clone https://github.com/Abdelrhamaan/Pyramids-Pharmacy
          cd Pyramids-Pharmacy

          # Update settings.py with dynamic CORS_ALLOWED_ORIGINS
          BACKEND_SETTINGS="/home/ec2-user/Pyramids-Pharmacy/backend/pyramids_pharmacy/settings.py"
          echo >> $BACKEND_SETTINGS
          echo "CORS_ALLOWED_ORIGINS = [" >> $BACKEND_SETTINGS
          echo "    \"http://$PUBLIC_IP:3000\",  # Dynamic Frontend IP" >> $BACKEND_SETTINGS
          echo "]" >> $BACKEND_SETTINGS

          # Create frontend environment configuration
          cat << EOF > frontend/public/env-config.js
          window.ENV = {
            REACT_APP_API_BASE_URL: "http://$PUBLIC_IP:8000"
          };
          EOF

          # Create .env file for Docker Compose
          cat << EOF > .env
          PUBLIC_IP=$PUBLIC_IP
          REACT_APP_API_BASE_URL=http://$PUBLIC_IP:8000
          EOF

          # Set permissions
          sudo chown -R ec2-user:ec2-user /home/ec2-user/Pyramids-Pharmacy
          
          # Clean up Docker
          docker system prune -a -f
          sudo rm -rf /var/log/*

          # Build and start the services
          docker-compose build
          docker-compose up -d

          # Wait for containers to start
          sleep 30

          # Run database migrations
          docker exec pyramids-pharmacy-backend-1 python manage.py makemigrations
          docker exec pyramids-pharmacy-backend-1 python manage.py migrate

          # Create a script to check and restart services if needed
          cat << 'EOF' > /home/ec2-user/check-services.sh
          #!/bin/bash
          if ! docker ps | grep -q pyramids-pharmacy-frontend-1; then
            cd /home/ec2-user/Pyramids-Pharmacy
            docker-compose up -d frontend
          fi
          if ! docker ps | grep -q pyramids-pharmacy-backend-1; then
            cd /home/ec2-user/Pyramids-Pharmacy
            docker-compose up -d backend
          fi
          EOF

          chmod +x /home/ec2-user/check-services.sh

          # Add cron job to check services every 5 minutes
          (crontab -l 2>/dev/null; echo "*/5 * * * * /home/ec2-user/check-services.sh") | crontab -

          # Final restart to ensure everything is running
          cd /home/ec2-user/Pyramids-Pharmacy
          docker-compose restart

Outputs:
  InstancePublicIP:
    Description: "Public IP of the EC2 instance"
    Value: !GetAtt EC2Instance.PublicIp

  InstancePublicDNS:
    Description: "Public DNS of the EC2 instance"
    Value: !GetAtt EC2Instance.PublicDnsName

  ElasticIP:
    Description: "Elastic IP assigned to the instance"
    Value: !Ref ElasticIP

  BackendURL:
    Description: "URL for the backend API"
    Value: !Sub "http://${ElasticIP}:8000"

  FrontendURL:
    Description: "URL for the frontend application"
    Value: !Sub "http://${ElasticIP}:3000"
